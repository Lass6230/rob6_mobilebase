amcl: #
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2 #increase #Expected process noise in odometry’s rotation estimate from rotation.
    alpha2: 0.1 #increase? #Expected process noise in odometry’s rotation estimate from translation.
    alpha3: 0.1 #decrease? #Expected process noise in odometry’s translation estimate from translation.
    alpha4: 0.2 #Expected process noise in odometry’s translation estimate from rotation.
   # alpha5: 0.2 #For Omni models only: translation noise.
    base_frame_id: "base_footprint" #"base_link"  #basefootprint makes the local costmap work lol
    beam_skip_distance: 0.5 #decrease
    beam_skip_error_threshold: 0.9 #decrease
    beam_skip_threshold: 0.3 
    do_beamskip: false #try true
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 3.0 #2.0 #try 3 or 4
    laser_max_range: 20.0 #100
    laser_min_range: 0.1
    laser_model_type: "likelihood_field" #likelihood_field_prob this should incorporate beamskip
    max_beams: 60
    max_particles: 2000 #2000
    min_particles: 500
    odom_frame_id: "odom"
    set_initial_pose: true
    initial_pose: 
      # x: 1.7
      # y: 0.6
      # yaw: 1.9
      x: -2.0
      y: 1.0
      yaw: 0.0



    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0 #0.1 #0.1 #0
    recovery_alpha_slow: 0.0 #0.001 #0.001 #0
    resample_interval: 1
    robot_model_type: "differential" #"nav2_amcl::DifferentialMotionModel" 
    save_pose_rate: 1.0 #0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0 #0.2 #1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.7 #0.9 
    z_max: 0.05
    z_rand: 0.7 #0.9
    z_short: 0.05
    scan_topic: scan

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom #try commenting
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    transform_tolerance: 0.2
    goal_reached_tol: 0.1 #0.25
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True


controller_server:
  ros__parameters:
    odom_topic: /odom
    use_sim_time: True
    controller_frequency: 10.0
    controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: teb_local_planner::TebLocalPlannerROS

      teb_autosize: 1.0
      dt_ref: 0.3
      dt_hysteresis: 0.1
      max_samples: 500
      global_plan_overwrite_orientation: True #False
      allow_init_with_backwards_motion: True #False
      max_global_plan_lookahead_dist: 3.0
      global_plan_viapoint_sep: 0.3
      global_plan_prune_distance: 1.0
      exact_arc_length: False
      feasibility_check_no_poses: 2
      publish_feedback: False
          
      # Robot
              
      max_vel_x: 1.0
      max_vel_theta: 0.7 
      acc_lim_x: 0.7
      acc_lim_theta: 1.0

      footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
        type: "line"
        line_start: [0.1, 0.0] # for type "line"
        line_end: [-0.3, 0.0] # for type "line"

        # type: "circular"
        # radius: 0.17
        
        # type: "two_circles"
        # front_offset: 0.1 # for type "two_circles"
        # front_radius: 0.18 # for type "two_circles"
        # rear_offset: 0.25 # for type "two_circles"
        # rear_radius: 0.18 # for type "two_circles"

        # type: "polygon"
        # vertices: [ [0.3, 0.06], [0.3, -0.14], [0.13, -0.17], [-0.43, -0.17], [-0.43, 0.17], [0.13, 0.17], [0.2, 0.17],  ]
      

      # GoalTolerance
              
      free_goal_vel: False
          
      # Obstacles
          
      min_obstacle_dist: 0.18
      inflation_dist: 0.4 #0.6
      include_costmap_obstacles: True
      costmap_obstacles_behind_robot_dist: 1.0
      obstacle_poses_affected: 15

      dynamic_obstacle_inflation_dist: 0.6
      include_dynamic_obstacles: True 

      costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
      costmap_converter_spin_thread: True
      costmap_converter_rate: 5

      # Optimization
          
      no_inner_iterations: 5
      no_outer_iterations: 4
      optimization_activate: True
      optimization_verbose: False
      penalty_epsilon: 0.1 #
      obstacle_cost_exponent: 4.0
      weight_max_vel_x: 0.5
      weight_max_vel_theta: 0.5
      weight_acc_lim_x: 0.5
      weight_acc_lim_theta: 10.5
      weight_kinematics_nh: 1000.0
      weight_kinematics_forward_drive: 200.0 # 3.0
      weight_kinematics_turning_radius: 1.0
      weight_optimaltime: 1.0 # must be > 0
      weight_shortest_path: 0.1 #0.0
      weight_obstacle: 100.0
      weight_inflation: 0.2
      weight_dynamic_obstacle: 10.0 # not in use yet
      weight_dynamic_obstacle_inflation: 0.2
      weight_viapoint: 50.0
      weight_adapt_factor: 2.0

      # Homotopy Class Planner

      enable_homotopy_class_planning: True
      enable_multithreading: True
      max_number_classes: 4
      selection_cost_hysteresis: 5.0
      selection_prefer_initial_plan: 2.0 #1.0
      selection_obst_cost_scale: 1.0
      selection_alternative_time_cost: True

      roadmap_graph_no_samples: 15
      roadmap_graph_area_width: 5.0
      roadmap_graph_area_length_scale: 1.0
      h_signature_prescaler: 0.5
      h_signature_threshold: 0.1
      obstacle_heading_threshold: 0.45
      switching_blocking_period: 0.0
      viapoints_all_candidates: True
      delete_detours_backwards: True
      max_ratio_detours_duration_best_duration: 3.0
      visualize_hc_graph: False
      visualize_with_time_as_z_axis_scale: 0.0

      # Recovery
      
      shrink_horizon_backup: True
      shrink_horizon_min_duration: 10.0
      oscillation_recovery: True
      oscillation_v_eps: 0.1
      oscillation_omega_eps: 0.1
      oscillation_recovery_min_duration: 10.0
      oscillation_filter_duration: 10.0


# controller_server:
#   ros__parameters:
#     odom_topic: /odom
#     use_sim_time: True
#     controller_frequency: 5.0
#     controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
#     controller_plugins: ["FollowPath"]
#     FollowPath:
#       plugin: teb_local_planner::TebLocalPlannerROS

#       teb_autosize: 1.0
#       dt_ref: 0.3
#       dt_hysteresis: 0.1
#       max_samples: 500
#       global_plan_overwrite_orientation: False
#       allow_init_with_backwards_motion: False
#       max_global_plan_lookahead_dist: 3.0
#       global_plan_viapoint_sep: 0.3
#       global_plan_prune_distance: 1.0
#       exact_arc_length: False
#       feasibility_check_no_poses: 2
#       publish_feedback: False
          
#       # Robot
              
#       max_vel_x: 0.26
#       max_vel_theta: 1.0 
#       acc_lim_x: 2.5
#       acc_lim_theta: 3.2

#       footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
#         type: "circular"
#         radius: 0.17 # for type "circular"

#       # GoalTolerance
              
#       free_goal_vel: False
          
#       # Obstacles
          
#       min_obstacle_dist: 0.27
#       inflation_dist: 0.6
#       include_costmap_obstacles: True
#       costmap_obstacles_behind_robot_dist: 1.0
#       obstacle_poses_affected: 15

#       dynamic_obstacle_inflation_dist: 0.6
#       include_dynamic_obstacles: True 

#       costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
#       costmap_converter_spin_thread: True
#       costmap_converter_rate: 5

#       # Optimization
          
#       no_inner_iterations: 5
#       no_outer_iterations: 4
#       optimization_activate: True
#       optimization_verbose: False
#       penalty_epsilon: 0.1
#       obstacle_cost_exponent: 4.0
#       weight_max_vel_x: 0.5
#       weight_max_vel_theta: 0.5
#       weight_acc_lim_x: 0.5
#       weight_acc_lim_theta: 10.5
#       weight_kinematics_nh: 1000.0
#       weight_kinematics_forward_drive: 500.0
#       weight_kinematics_turning_radius: 1.0
#       weight_optimaltime: 1.0 # must be > 0
#       weight_shortest_path: 0.0
#       weight_obstacle: 100.0
#       weight_inflation: 0.2
#       weight_dynamic_obstacle: 10.0 # not in use yet
#       weight_dynamic_obstacle_inflation: 0.2
#       weight_viapoint: 50.0
#       weight_adapt_factor: 2.0

#       # Homotopy Class Planner

#       enable_homotopy_class_planning: True
#       enable_multithreading: True
#       max_number_classes: 4
#       selection_cost_hysteresis: 5.0
#       selection_prefer_initial_plan: 1.0
#       selection_obst_cost_scale: 1.0
#       selection_alternative_time_cost: True

#       roadmap_graph_no_samples: 15
#       roadmap_graph_area_width: 5.0
#       roadmap_graph_area_length_scale: 1.0
#       h_signature_prescaler: 0.5
#       h_signature_threshold: 0.1
#       obstacle_heading_threshold: 0.45
#       switching_blocking_period: 0.0
#       viapoints_all_candidates: True
#       delete_detours_backwards: True
#       max_ratio_detours_duration_best_duration: 3.0
#       visualize_hc_graph: False
#       visualize_with_time_as_z_axis_scale: 0.0

#       # Recovery
      
#       shrink_horizon_backup: True
#       shrink_horizon_min_duration: 10.0
#       oscillation_recovery: True
#       oscillation_v_eps: 0.1
#       oscillation_omega_eps: 0.1
#       oscillation_recovery_min_duration: 10.0
#       oscillation_filter_duration: 10.0


      
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: map #odom works with base_link but is heavily delayed
      robot_base_frame: base_footprint #base_link #both work
      use_sim_time: True
      rolling_window: true
      width: 4
      height: 4
      resolution: 0.04 #increase
      #robot_radius: 0.17
      footprint: "[ [0.3, 0.06], [0.3, -0.14], [0.13, -0.17], [-0.43, -0.17], [-0.43, 0.17], [0.13, 0.17], [0.2, 0.17] ]"
      plugins: ["voxel_layer", "inflation_layer"]
      # filters: ["keepout_filter", "inflation_layer"]
      # keepout_filter:
      #   plugin: "nav2_costmap_2d::KeepoutFilter"
      #   enabled: True
      #   filter_info_topic: "/costmap_filter_info"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.5 #0.65 
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 0.5
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      robot_radius: 0.17
      #footprint: "[ [0.3, 0.06], [0.3, -0.14], [0.13, -0.17], [-0.43, -0.17], [-0.43, 0.17], [0.13, 0.17], [0.2, 0.17] ]"
      resolution: 0.04
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      filters: ["keepout_filter", "inflation_layer"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.5
          raytrace_min_range: 0.0
          obstacle_max_range: 1.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.5 #0.65
      always_send_full_costmap: True #True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "map.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server: #hates turning on the spot on startup otherwise nice
  ros__parameters:
    expected_planner_frequency: 1.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner" 
      tolerance: 0.2
      use_astar: False
      allow_unknown: True

# planner_server: #gets stuck  ALOT
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: True

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid"
#       downsample_costmap: False           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#       allow_unknown: False                 # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#       max_planning_time: 5.0              # max time in s for planner to plan, smooth
#       motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
#       angle_quantization_bins: 72         # Number of angle bins for search
#       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0 #3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#       minimum_turning_radius: 0.1        # minimum turning radius in m of path / vehicle
#       reverse_penalty: 1.2 #2.0                # Penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
#       non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 10.0 #3.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.015
#       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: True      # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#       smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2


# planner_server: #the holy grail but is not implemented in galactic :(((
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: True

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerLattice" 
#       allow_unknown: true                 # Allow traveling in unknown space
#       tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#       max_iterations: 1000000             # Maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#       max_planning_time: 5.0              # Max time in s for planner to plan, smooth
#       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#       reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.05                # Penalty to apply if motion is changing directions (L to R), must be >= 0
#       non_straight_penalty: 1.05          # Penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       rotation_penalty: 5.0               # Penalty to apply to in-place rotations, if minimum control set contains them
#       retrospective_penalty: 0.015
#       lattice_filepath: ""                # The filepath to the state lattice graph
#       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#       allow_reverse_expansion: false      # If true, allows the robot to use the primitives to expand in the mirrored opposite direction of the current robot's orientation (to reverse).
#       smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path
      
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2

# planner_server: #gets stuck a bit but seems reliable
#   ros__parameters:
#     planner_plugin_types: ["nav2_theta_star_planner/ThetaStarPlanner"] 
#     planner_plugin_ids: ["GridBased"]
#     GridBased:
#       how_many_corners: 8
#       w_euc_cost: 1.0
#       w_traversal_cost: 2.0

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: map #odom #untested with map
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.5 
    min_rotational_vel: 0.1
    rotational_acc_lim: 0.1 

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    loop_rate: 10
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
